<!--
  This section was excluded in Fall 2021, but should be put back in at
  some point.
-->
<section xml:id="section-recurrence">
  <title>Linear Recurrence Relations</title>
  <subsection xml:id="subsection-recurrence-definition">
    <title>Definition of Recurrence Relations</title>
    <p>
    An important use of iterated processes (such as those in dynamical
    systems) is understanding linear recurrence relations.
    </p>
    <definition>
      <statement>
        <p>
          A <term>linear recurrence relation</term> is a sequence of
          numbers <m>\{a_n\}</m> for <m>n \in \NN</m> such that there is
          a linear equation for <m>a_i</m> in terms of the previous
          <m>k</m> terms. The number <m>k</m> is called the
          <term>order</term> of the recurrence relation. The first
          <m>k</m> terms must be explicitly given.
        </p>
      </statement>
    </definition>
    <p>
      If I write <m>a_n = c_1a_{n-1} + c_2 a_{n-2} + \ldots + c_k
      a_{n-k}</m>, then we can re-interpret this as a matrix and a
      dynamical system. We do this by writing a <m>k</m>-vector with
      entries <m>a_{n+k}, \ldots, a_{n+1}</m>. Then the recurrence
      relation is given by a matrix equation.
      <me>
        \begin{pmatrix} a_{n+k} \\ a_{n+k-1} \\ \vdots \\ a_{n+1}
        \end{pmatrix} = \begin{pmatrix} c_1 \amp  c_2 \amp  \ldots
        c_{k-1} \amp  \amp c_k \\ 1 \amp  0 \amp  \ldots \amp  0 \amp  0
        \\ 0 \amp  1 \amp \ldots \amp  0 \amp  0 \\ \vdots \amp  \vdots
        \amp  \ddots \amp \vdots \\ 0 \amp  0 \amp  \ldots 1 \amp  0
        \end{pmatrix} \begin{pmatrix} a_{n+k-1} \\ a_{n+k-2} \\ \vdots
        \\ a_{n} \end{pmatrix}
      </me>
    </p>
    <p>
      As long as the <m>c_i</m> are all non-zero, this is an irreducible
      matrix.
    </p>
  </subsection>
  <subsection xml:id="subsection-recurrence-solving">
    <title>Solving Recurrence Relations</title>
    <p>
      A recurrence relation is a recursive way of creating a sequence,
      but it is difficult to calculate with. If we wanted the 400th
      term, we would have to calculate all the intermediate terms as
      well. That leads to a natural question: is there a closed-form
      equation that calculates the <m>k</m>th term or a recurrence
      relation directly?  In some circumstances, eigenvalues and
      diagonalization can help solve this problem.
    </p>
    <p>
      Let <m>C</m> be the matrix of coefficients and let <m>u =
      \begin{pmatrix} a_k \\ a_{k-1} \\ \vdots \\ a_1 \end{pmatrix}</m>.
      Assume that <m>C</m> is diagonalizable and that <m>\{v_1 \ldots,
      v_k\}</m> are a complete set of eigenvalues. These <m>k</m>
      vectors will span <m>\RR^k</m>, so we can take the vector
      <m>v</m>, formed above of <m>k</m> consecutive terms of the
      recurrence relation, and express it in terms of the eigenvectors.
      <me>
        v = b_1 v_1 + b_2 v_2 + \ldots + b_k v_k
      </me>
    </p>
    <p>
      The matrix <m>C</m> acts on <m>v</m> by iterating the terms of the
      series. The term <m>a_{n+k}</m> of the series is the first term
      of the vector given by the matrix <m>C</m> acting <m>n</m> times
      on <m>v</m>: <m>C^n v</m>. So the matrix action <m>C^n v</m>
      entirely determines the behaviour of the series. Then we can use
      the eigenvalue decomposition.
      <me>
        C^n v = C^n (b_1 v_1 + b_2 v_2 + v + b_k v_k) = b_1 \lambda_1^n
        v_1+ b_2 \lambda_2^n v_2 + \ldots + b_k \lambda_k^n )
      </me>
    </p>
    <p>
      Since all we are doing is taking higher powers of the eigenvalue,
      this is a reasonably easy calculation. Isolating the first
      coefficient of the vector will give the desired closed form
      expression.
    </p>
  </subsection>
</section>
